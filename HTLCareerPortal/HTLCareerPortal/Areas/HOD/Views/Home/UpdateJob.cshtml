@model HTLCareerPortal.JobSetup

@{
    ViewBag.Title = "UpdateJob";
}

<h2 class="text-center main-heading">UPDATE THE SELECTED JOB.</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.Label("Job Title", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.JobTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.JobTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Total Position", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotalPosition, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotalPosition, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Job Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.JobType, new SelectList(new[] { new SelectListItem { Value = "", Text = "Select Job Type" }, new SelectListItem { Value = "Permanent", Text = "Permanent" }, new SelectListItem { Value = "Contract", Text = "Contract" }, }, "Value", "Text"), new { @class = "form-control option" })


                @Html.ValidationMessageFor(model => model.JobType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Education, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Education, new { @class = " form-control text-areas" })
                @Html.ValidationMessageFor(model => model.Education, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.Department, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("dep", null, "Select Department", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.Label("Job Requirements", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.JobRequirements, new { @class = " form-control text-areas" })
                @Html.ValidationMessageFor(model => model.JobRequirements, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Skills Required", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.SkillsRequired, new { @class = " form-control text-areas" })
                @Html.ValidationMessageFor(model => model.SkillsRequired, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Job Opening Date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.JobOpeningDate, new { @class = "form-control", @Value = Model.JobOpeningDate.Value.ToString("yyyy-MM-dd"), @type = "date" })
                @Html.ValidationMessageFor(model => model.JobOpeningDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Job Closing Date", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.JobClosingDate, new { @class = "form-control", @Value = Model.JobClosingDate.Value.ToString("yyyy-MM-dd"), @type = "date" })
                @Html.ValidationMessageFor(model => model.JobClosingDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Job Status", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.JobStatus, new SelectList(new[] { new SelectListItem { Value = "ACTIVE", Text = "ACTIVE" }, new SelectListItem { Value = "INACTIVE", Text = "INACTIVE" }, }, "Value", "Text"), new { @class = "form-control option" })

                @Html.ValidationMessageFor(model => model.JobStatus, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Job Location", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.JobLocation, (IEnumerable<SelectListItem>)ViewBag.city, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.citySetup.cityName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Scope Of Responsibility", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.ScopeOfResponsibility, new { @class = " form-control text-areas" })
                @Html.ValidationMessageFor(model => model.ScopeOfResponsibility, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Experience, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Experience, new { @class = " form-control text-areas" })
                @Html.ValidationMessageFor(model => model.Experience, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Compensation Benefits", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.CompensationBenefits, new { @class = " form-control text-areas" })
                @Html.ValidationMessageFor(model => model.CompensationBenefits, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                @Html.HiddenFor(model => model.pk, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.pk, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Update Job" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "jobs")
</div>
